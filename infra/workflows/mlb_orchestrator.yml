# Cloud Workflows YAML
main:
  params: [team_ids]
  steps:
    - setVars:
        assign:
          - region: "europe-west4"
          - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - ingestJob: "mlb-ingest"
          - digestJob: "mlb-digest"
          - easternNow: ${time.now("America/New_York")}
          - gameDate: ${time.format(easternNow, "%Y-%m-%d", "America/New_York")}
    - forEachTeam:
        for:
          value: tid
          in: ${team_ids}
          steps:
            - buildUrl:
                assign:
                  - url: ${"https://statsapi.mlb.com/api/v1/schedule?sportId=1&teamId=" + string(tid) + "&date=" + gameDate}
            - fetchSchedule:
                call: http.get
                args: { url: ${url} }
                result: sched
            - extractGames:
                assign:
                  - games: ${default(map.get(list.get(map.get(sched.body, "dates"), 0), "games"), [])}
            - forEachGame:
                for:
                  value: g
                  in: ${games}
                  steps:
                    - deriveTimes:
                        assign:
                          - startUtc: ${time.parse(g.gameDate)}   # UTC first pitch
                          - officialDate: ${g.officialDate}       # local official date "YYYY-MM-DD"
                          - gamePk: ${int(g.gamePk)}
                    - runController:
                        call: runForGame
                        args:
                          project: ${project}
                          region: ${region}
                          ingestJob: ${ingestJob}
                          digestJob: ${digestJob}
                          team_id: ${tid}
                          officialDate: ${officialDate}
                          startUtc: ${startUtc}
                          gamePk: ${gamePk}
                        result: _
  return: "ok"

runForGame:
  params: [project, region, ingestJob, digestJob, team_id, officialDate, startUtc, gamePk]
  steps:
    - waitStartPlus90:
        call: sys.sleep
        args:
          seconds: ${max(0, time.seconds(time.add(startUtc, 90, "minutes")) - time.seconds(time.now()))}
    - loop:
        steps:
          - runIngest:
              call: googleapis.run.v2.projects.locations.jobs.run
              args:
                name: ${"projects/" + project + "/locations/" + region + "/jobs/" + ingestJob}
                body:
                  overrides:
                    containerOverrides:
                      - args: ["--team", string(team_id), "--date", officialDate]
          - checkFinal:
              call: http.get
              args:
                url: ${"https://statsapi.mlb.com/api/v1.1/game/" + string(gamePk) + "/feed/live"}
              result: feed
          - states:
              assign:
                - sd: ${map.get(map.get(map.get(feed.body, "gameData"), "status"), "detailedState")}
                - sa: ${map.get(map.get(map.get(feed.body, "gameData"), "status"), "abstractGameState")}
          - done?:
              switch:
                - condition: ${lower(sa) == "final" || starts_with(sd, "Final") || starts_with(sd, "Game Over") || starts_with(sd, "Completed")}
                  next: runDigest
          - wait15:
              call: sys.sleep
              args: { seconds: 900 }
          - again:
              next: runIngest
    - runDigest:
        call: googleapis.run.v2.projects.locations.jobs.run
        args:
          name: ${"projects/" + project + "/locations/" + region + "/jobs/" + digestJob}
          body:
            overrides:
              containerOverrides:
                - args: ["--team", string(team_id), "--date", officialDate]
    - finished:
        return: "final"
